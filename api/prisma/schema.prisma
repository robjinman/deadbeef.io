datasource db {
  provider = "postgresql"
  url = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
//  AUTHOR
  USER
}

model Article {
  id Int @id @default(autoincrement())
  draft Boolean
  createdAt DateTime @default(now())
  modifiedAt DateTime @updatedAt
  publishedAt DateTime
  title String
  summary String
  content String
  files File[]
  tags Tag[]
  comments Comment[]
}

model Tag {
  id Int @id @default(autoincrement())
  name String @unique
  articles Article[]
}

model Page {
  id Int @id @default(autoincrement())
  name String @unique
  content String
  files File[]
}

// Ideally, we would define an interface like this, which would be implemented
// by Page and Article, but Prisma doesn't support this yet.
//
// interface Document {
//   id Int @id @default(autoincrement())
//   content String
// }

model File {
  id Int @id @default(autoincrement())

  // Prisma doesn't support polymorphism through interfaces yet
  // document Document
  //
  // Instead, one of these will be null
  article Article? @relation(fields: [articleId], references: [id])
  articleId Int?
  page Page? @relation(fields: [pageId], references: [id])
  pageId Int?

  name String
  extension String
}

model User {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  role Role @default(USER)
  name String @unique
  email String @unique
  // When null, the account has been activated
  activationCode String? @unique
  pwHash String
  comments Comment[]
}

model Comment {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  content String
  user User @relation(fields: [userId], references: [id])
  userId Int
  article Article @relation(fields: [articleId], references: [id])
  articleId Int
}
